version: 2.1

commands:
  install-aws-cli:
      description: Install AWS CLI
      steps:
        - run:
            name: Install AWS CLI
            command: |
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              sudo ./aws/install

  install-ansible:
      description: Install Ansible
      steps:
        - run:
            name: Install Ansible
            command: |
              sudo apt update
              sudo apt install software-properties-common
              sudo apt-add-repository --yes --update ppa:ansible/ansible
              sudo apt install ansible
  
  install-nodejs:
      description: Install node.js 13
      steps:
        - run:
            name: Install node.js 13
            command: |
              curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
              sudo apt install -y nodejs

  destroy-environment:
      description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
      parameters:
        workflow-id:
          type: string
          default: ${CIRCLE_WORKFLOW_ID:0:7}
      steps:
        - run:
            name: Destroy environments (Frontend and Backend)
            when: on_fail
            command: |
              aws s3 rm s3://udapeople-<<parameters.workflow-id>> --recursive
              aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow-id >>
              aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow-id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      Workflow_ID:
        type: string   
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/migration_<< parameters.Workflow_ID >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          key: frontenddependencies
          paths:
            - frontend/node_modules
            - frontend/dist

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Build back-end
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          key: backenddependencies
          paths:
            - backend/node_modules
            - backend/dist

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Unit test for front-end
          command: |
            cd frontend
            npm install
            npm run test

                
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Unit test for back-end
          command: |
             cd backend
             npm install
             npm run test
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: Scan for front-end
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm update minimist --depth 4
            npm update loader-utils --depth 2
            npm update lodash --depth 12
            npm update mkdirp --depth 4
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Scan for back-end
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws-cli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add back-end ip to ansible inventory
          command: |
                BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
                  --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' \
                  --output text)
                echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
                cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-ansible
      - add_ssh_keys:
          fingerprints: ["30:1a:4e:65:9d:c1:d0:07:18:ca:98:98:64:4a:d6:d6"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-aws-cli
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -d '1' https://kvdb.io/${KVDB_BUCKET}/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "No migrations are pending" 
            fi
      - destroy-environment
      - revert-migrations


  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws-cli
      - install-nodejs
      # - restore_cache:
      #     keys: [frontenddependencies]
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            echo "${API_URL}"
            cat frontend/.env

      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install

      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp frontend s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-aws-cli
      - install-ansible
      - install-nodejs
      - add_ssh_keys:
          fingerprints: ["30:1a:4e:65:9d:c1:d0:07:18:ca:98:98:64:4a:d6:d6"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backenddependencies]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Add the backend to an artifact
          command: |
            cd backend
            npm run build
            mkdir backend
            sudo tar cfvz backend.tar.gz dist/* package*
            cd ..
            sudo cp backend/backend.tar.gz .circleci/ansible/roles/deploy/files/
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment  
      - revert-migrations

  # smoke-test:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - install-aws-cli
  #     - install-nodejs
  #     - run:
  #         name: Get backend url & Backend smoke test
  #         command: |
  #           BACKEND_IP=$(aws ec2 describe-instances \
  #             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #             --query 'Reservations[*].Instances[*].PublicIpAddress' \
  #             --output text)
  #           export API_URL="http://${BACKEND_IP}:3030"
  #           echo "${API_URL}"
  #           if curl -s $API_URL/api/status | grep "ok"
  #           then
  #             exit 0
  #           else
  #             exit 1
  #           fi
  #     - run:
  #         name: Frontend smoke test.
  #         command: |
  #             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
  #             echo ${URL} 
  #             if curl -s ${URL} | grep "Welcome"
  #             then
  #               exit 0
  #             else
  #               exit 1
  #             fi
  #     - destroy-environment  
  #     - revert-migrations 

  # cloudfront-update:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - checkout
  #     - install-aws-cli
  #     - install-nodejs
  #     - run:
  #         name: Update cloudfront distribution
  #         command: |
  #           export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].value" --no-paginate --output text)
  #           echo $OldWorkflowID >> ~/OldWorkflowID.txt
  #           cat ~/OldWorkflowID.txt
  #           aws cloudformation deploy \
  #             --template-file .circleci/files/cloudfront.yml \
  #             --stack-name InitialStack \
  #             --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
  #     - destroy-environment  
  #     - revert-migrations 

# cleanup:
#     docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]